<p><span style="font-family: verdana;">It's been a while since last KDU update and thanks to Artem Baranov from Kaspersky my attention is again on it. The new 1.2 release contain eight new providers and set of additional changes that were required for new providers work. Here is list of new providers added, the details on each are following:</span></p><p></p><ul style="text-align: left;"><li><span style="font-family: verdana;">GMER "antirootkit"</span></li><li><span style="font-family: verdana;">Dell BIOS Utility (assigned CVE-2021-21551)</span></li><li><span style="font-family: verdana;">Mimikatz "Mimidrv"</span></li><li><span style="font-family: verdana;">Process Hacker "KProcessHacker2"</span></li><li><span style="font-family: verdana;">Process Explorer "ProcExp152"</span></li><li><span style="font-family: verdana;">Dell BIOS Utility (assigned&nbsp;CVE-2021-36276)</span></li><li><span style="font-family: verdana;">Cheat Engine</span></li><li><span style="font-family: verdana;">ASUS GPU Tweak II/III (EneTech next-gen)</span></li></ul><div><span style="font-family: verdana;">And after describing new providers we will take a tour into wonderful world of Microsoft incoherency with their newest Win10/Win11 drivers blacklist managed by CI.dll</span></div><div><span style="font-family: verdana;"><br /></span></div><h3 style="text-align: left;"><span style="font-family: verdana;">Providers description&nbsp;</span></h3><p></p><span style="font-size: x-small;">(number is ID in KDU database)</span><div></div><p></p><div><span style="font-family: verdana;">15. GMER "antirootkit"</span></div><div><span style="font-family: verdana;"><br /></span></div><div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEhgE26XQH4W7oNu3Vmvz5x9n-uoFyL2GiLc2mUDR062lxu5ROcH-eDDrpEjYfZP6pndxU85FOvqgfqIfHduk43Ygi0dHZB7MOyMXs9MiH6w5FFXentPCwc8ZrM2Kk-hYIhFOrPXx2uf4XYSYd68x5kHxQwWbRMm9DvymcvUsOn30LLBRI6BI36Xyl7S=s722" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="555" data-original-width="722" src="https://blogger.googleusercontent.com/img/a/AVvXsEhgE26XQH4W7oNu3Vmvz5x9n-uoFyL2GiLc2mUDR062lxu5ROcH-eDDrpEjYfZP6pndxU85FOvqgfqIfHduk43Ygi0dHZB7MOyMXs9MiH6w5FFXentPCwc8ZrM2Kk-hYIhFOrPXx2uf4XYSYd68x5kHxQwWbRMm9DvymcvUsOn30LLBRI6BI36Xyl7S=s16000" title="Pic 1. What could possible go wrong here" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;"><span style="text-align: left;">Pic 1. What could possible go wrong here</span></td></tr></tbody></table><br /></div><div><span style="font-family: verdana;">GMER "antirootkit", I'm familiar with this software since it birth and introduction by author (Przemyslaw Gmerek) on SysInternals forums during Rustock's first variants most active period. Since it first release it was a mediocre software with limited capabilities to detect or remove anything despite author claims (he still has a dedicated gallery on his long forgotten site). Since I was developing the same toolset during that time I of course reverse-engineered GMER to find out if there is anything interesting in it. It sounds fun but this is exactly how things were going in the 2005-2010 anywhere with tools developed by enthusiasts. Amount of copy-pasted techniques and code from different authors in different tools of this time is tremendous. GMER driver doesn't surprised me and except obvious bugs I didn't found anything else interesting in it, except number of simple ways how to completely make it blind in case of rootkit detection (we later implemented one of in our laboratory rootkit called <i>Unreal</i> so Gmerek was forced to do an emergency update ??). Remember, it was year 2006 and Windows XP was all around and shiny again after general Vista fuckup. Entire class of this software died around 2011-2013 so I was surprised that GMER actually managed not only survive but move to x64 world. Ohh, better he doesn't. The actual x64 driver made of copy-paste from x86 version with few things adjusted to make it work on x64 and some features that are bound to x86 only completely removed. For some unknown reason it still has a branches of code that doesn't make any sense on x64, that shows how actually author didn't care about final product. Since acquiring by Avast their Avast MBR tool contain exact the same driver from GMER (because it's powered by "GMER technology", this is a fucking rofl yeah). From current perspective this driver is a wormhole and I'm surprised no one actually tried to exploit it for a fancy CVE id, almost just like Trend Micro tool highlighted in one of my previous posts. For KDU usage the most prominent&nbsp;features of GMER are arbitrary kernel virtual memory read and write. This is not a bug, it is intentionally created mess so GMER can read/write kernel memory via it's process. This feature implemented via MDL mapping and accessible with dedicated IOCTL with simple data structure. One important note is that before calling this (or any other IOCTL) you have to talk with GMER driver first to let it know it was "initialized". This is done with a special IOCTL. Note that GMER driver sets <i>exclusive</i> flag when creating it device object, however when application crash driver stays in memory and accessible for everyone.</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">TL;DR - current GMER is completely useless (and dangerous due to multiple bugs, just look on pic 1 - few seconds before BSOD) in terms of "rootkit detection" usage and represent a security risk by containing Windows security bypasses available without any proper verification of caller nor access checks.&nbsp;</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">16. Dell BIOS Utility&nbsp;</span><span style="font-family: verdana;">(assigned&nbsp;</span><span style="font-family: verdana;">CVE-2021-21551)</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">This one is pretty simple and well described in CVE entry. This is a typical flaw in giveio-type drivers. It has <i><b>memmove</b></i>&nbsp;with completely user controlled parameters send by special IOCTL. &nbsp;Such "features" aren't so rare in the wonderful world of hardware vendors drivers.</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">17. Mimikatz "Mimidrv"</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">This is auxiliary&nbsp;driver from Mimikatz tool which is <a href="https://github.com/gentilkiwi/mimikatz/">open-source</a>. Mimikatz is a well known tool and a lot of people found it damn useful. Well I'm not one of them. Speaking of mimidrv - it has full&nbsp;</span><span style="font-family: verdana;">source available </span><span style="font-family: verdana;">and by opening this source you will want to close it ASAP to not hurt your eyes with amount of shitcode you will face. It's a complete bugged wormhole which has number of built binaries with different versions all signed with a valid certificate. No wonder Microsoft banned this certificate in their HVCI blocklist which we will discuss later. We are interested here in arbitrary kernel virtual memory read/write IOCTL's, in fact they are almost the same as in GMER. You don't need any special preconditions to start using mimidrv. Here is the details on other features of mimidrv -&nbsp;</span><span style="font-family: verdana;"><a href="https://posts.specterops.io/mimidrv-in-depth-4d273d19e148">Mimidrv In Depth: Exploring Mimikatz’s Kernel Driver</a>&nbsp;if you are interested.</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">18. Process Hacker "KProcessHacker2"</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">It is famous tool and I remember how it was born. Process Hacker come at SysInternals forum&nbsp;</span><span style="font-family: verdana;">with wj32&nbsp;</span><span style="font-family: verdana;">in the late 00s in form of open source task manager replacement written in C#. It was immediately&nbsp;criticized&nbsp;for this by forum members and after some reconsiderations wj32 ported it on more suitable programming language (thankfully&nbsp;there wasn't any cancer like Rust&nbsp;</span><span style="font-family: verdana;">popular</span><span style="font-family: verdana;">&nbsp;</span><span style="font-family: verdana;">that days). PH roots from Windows XP era with same design and philosophy</span><span style="font-family: verdana;">. That's how it started and worked just fine until Turla malware group widely popularized BYOVD (Bring Your Own Vulnerable Driver) attacks in 2014-2015. The mentioned PH driver KProcessHacker2 was abused by multiple actors starting from malware and ending up with cheat community. This followed with wave of antivirus detections and game bans. All because of this tool initial design and philosophy from Windows XP era. That is why it was full of wormhole functionality and still have it up-to-date. What is so unique in this driver? It provides a set of IOCTL's which work as Windows API replacements for several key to the Windows security functions. Just a few of them for example: OpenProcess, OpenThread, DuplicateHandle, TerminateThread, TerminateProcess, Set/GetThreadContext, Read/WriteProcessMemory. Natural hackbox isn't it? Earlier versions of PH code (which all nicely written and well documented) even contain remarks where author hopes that this driver client "is not a virus" so wj32 clearly predicted things can go worse ?? We will go back to PH in the end of this post. For KDU tasks this driver maybe not looking good at first glance (it looks like more suitable for malware usage ??), but then if you look on the things from a different perspective - hell yeah.</span><span style="font-family: verdana;">&nbsp;Here is why - starting from ancient Windows NT versions up to latest Windows 10 release </span><i style="font-family: verdana;">"System"</i><span style="font-family: verdana;"> process keeps handle to physical memory section. It was abused before for physical memory access and later Microsoft banned it from user mode usage by setting object header flag -&gt; kernel only access so you can't open new handle for this section from the user mode. Later MS added protected processes feature which additionally blocked exploitation because you can't open </span><i style="font-family: verdana;">"System"</i><span style="font-family: verdana;"> process with sufficient rights. And here Process Hacker driver comes to the rescue with it hackbox IOCTL's allowing us: open full process handle for <i>"System"</i> process, duplicate physical memory section handle to our process with same full access rights. Further is trivial. Important note about fancy new Windows 10 rebrand called Windows 11. There is no physical memory section handle in <i>"System"</i> process as I observed and it is too boring to figure out is it intentional or need any preconditions to make it popup again - you may consider this as homework.</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">19. Process Explorer "ProcExp152"</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">Rival of previous&nbsp;task manager. Or previous task manager is a rival to this, or new Windows 10/11 taskmanager is a rival to both or vice versa or..., I don't really follow this "task manager market war" which is a complete bullshit, just the fact that Process Explorer existed long before PH release and PH "release to public" place was Process Explorer developers forums. This is a small handy tool developed by Mark Russinovich before his acquiring by Microsoft and abandoning all his tools (they are now out-sourced to some Microsoft geniuses who decided to remake classic UI with new over overstretched buttons and idiotic bitmaps ruining your old UI experience, and oh-ah "dark mode" I forgot about it).&nbsp;Process Explorer driver provide limited set of features that works almost the same as hackbox from PH. Have you heard about AV detecting Process Explorer as malware? I didn't, maybe because it is signed by Microsoft??? Anyway, this driver does have access checks implemented at dispatch routine so it fits into Microsoft wonderland of what they call "security boundaries". It doesn't really matter for BYOVD, this driver allows process opening, handle duplication, process termination and more. It is used in KDU in a similar manner as KProcessHacker2 driver. Oh, it even re-used next by KDU as placeholder for the final shellcode, what an irony.</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">20.&nbsp;</span><span style="font-family: verdana;">Dell BIOS Utility (assigned&nbsp;CVE-2021-36276)</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">The same as previous Dell driver except it has different steps required for loading and new device name. In fact this is example of "fix" similar to that I described in my previous <a href="https://swapcontext.blogspot.com/2020/08/ene-technology-inc-vulnerable-drivers.html">blogpost</a>. TL;DR Dell fixed nothing and posed&nbsp;this driver update as ultimate fix for previously reported vulnerabilities. KDU exploits 2.5 version driver as I didn't bothered to find 2.7, but from all the description etc it will work the same way on 2.7 you only need to change device name.</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">21. Cheat Engine</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;"><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEghO73gFHMSmrdOvnmESF7dS5Ogeym5rbHRA9-pfCoOx133q_wfF7Ts9UHCwYwDIq7qlZint-2ut3iF5q0mXTPidHnNuj8YIxkuCiJfZjG5xbi1wMHcerHjhDezPlEg2wKzvGuUyPFGGKVyfgJ60vpDqpYlOVJAxRqsnuqpxaQ9g3vRA2kHUf8A-NNs=s728" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="728" data-original-width="666" src="https://blogger.googleusercontent.com/img/a/AVvXsEghO73gFHMSmrdOvnmESF7dS5Ogeym5rbHRA9-pfCoOx133q_wfF7Ts9UHCwYwDIq7qlZint-2ut3iF5q0mXTPidHnNuj8YIxkuCiJfZjG5xbi1wMHcerHjhDezPlEg2wKzvGuUyPFGGKVyfgJ60vpDqpYlOVJAxRqsnuqpxaQ9g3vRA2kHUf8A-NNs=s16000" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Pic 2. Cheat Engine 7.4</td></tr></tbody></table><br /></span></div><div><span style="font-family: verdana;"><strike>In</strike>famous <a href="https://github.com/cheat-engine/cheat-engine">open-source</a> tool mostly used for game cheating and cracking. Has a kernel mode component called DBK (DarkByte Kernel?) which is a wormhole by design with WHQL signature, yeah. This driver abused by malware in recent <a href="https://securelist.com/ghostemperor-from-proxylogon-to-kernel-mode/104407/">GhostEmperor</a> attacks. KDU uses similar pattern to write and execute code in kernel mode. Cheat Engine author tried to complicate his driver usage by 3rd parties (most likely by other cheat programs) by introducing few pseudo-security checks implemented on driver side. None of them can be considered as sufficient and mentioned above malware fully bypass them. KDU uses driver from the up-to-date Cheat Engine 7.4 package and proxy application "kernelmodeunloader.exe" from the same package. This driver is in HVCI blocklist. Warning to these who want to try: while installing Cheat Engine package (from official site) may install you a bunch of scamware if you won't pay attention to installation process and just spam "Next" clicks.&nbsp;</span><span style="font-family: verdana;">Note that Cheat Engine driver has some problems with Windows 7, so it may not work or load here.</span></div><div><span style="font-family: verdana;"><br /></span></div><div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEjz2R6qdcycRXaUjPUkaCvm9OZkTOs0aLccVOwg0ibmiP_Qo5UZRY5MozjwWr7I2O-462SuJFYhv8q5pO2R4VffSSVn3aOun-UuaKcHUYay8Ul4uSyHzwSDRWWhs49tRWVYF1yRk1gkO2-WJY_ZRVmBDaSjno5LoLRYD_Dp9OFi3HVlvqy9AdjMjhOo=s489" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="184" data-original-width="489" src="https://blogger.googleusercontent.com/img/a/AVvXsEjz2R6qdcycRXaUjPUkaCvm9OZkTOs0aLccVOwg0ibmiP_Qo5UZRY5MozjwWr7I2O-462SuJFYhv8q5pO2R4VffSSVn3aOun-UuaKcHUYay8Ul4uSyHzwSDRWWhs49tRWVYF1yRk1gkO2-WJY_ZRVmBDaSjno5LoLRYD_Dp9OFi3HVlvqy9AdjMjhOo=s16000" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Pic 3. Cheat Engine DBK load failure, Windows 7</td></tr></tbody></table><br /><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">22.&nbsp;</span><span style="font-family: verdana;">ASUS GPU Tweak II/III (EneTech next-gen)</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">It is implementation of what is stated in my previous <a href="https://swapcontext.blogspot.com/2021/04/kdu-v11-release-and-bonus-asio3sys.html">blogpost</a>. Nothing changed since that time, ASUS continuously use this trash in a number of it software products up to date. Side note, they also introduced new driver which looks like heavy remake of original WinIO with most of it dangerous features stripped, however not all. It is a something to investigate later.</span></div><div><span style="font-family: verdana;"><br /></span></div><h4 style="text-align: left;"><span style="font-family: verdana;">HVCI blocklist or welcome to wonderful world of Microsoft incoherency</span></h4><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">This feature introduced with HVCI on Windows 10. It is implemented as blocklist stored in <i><b>\systemroot\system32\codeintegrity\driversipolicy.p7b</b></i> file as certificate blob and specific code at CI.DLL to manage it. Decoding this <i>"driverspolicy"</i> data maybe accomplished with the following PowerShell script -&gt;&nbsp;<a href="https://gist.github.com/mattifestation/92e545bf1ee5b68eeb71d254cec2f78e">https://gist.github.com/mattifestation/92e545bf1ee5b68eeb71d254cec2f78e</a>. Microsoft maintains current state of this list on github -&gt;&nbsp;<a href="https://github.com/MicrosoftDocs/windows-itpro-docs/blob/public/windows/security/threat-protection/windows-defender-application-control/microsoft-recommended-driver-block-rules.md">https://github.com/MicrosoftDocs/windows-itpro-docs/blob/public/windows/security/threat-protection/windows-defender-application-control/microsoft-recommended-driver-block-rules.md</a>.&nbsp;This blocklist is loaded and parsed by CI.DLL in kernel mode and invoked when HVCI is enabled (Core Isolation -&gt; Memory Integrity) and something is trying to load driver. If this driver (authenticode hash, page hash, filename from version block, filename and version range from version block) found in blocklist Windows will deny it loading and log event. Presumable this list will be updated and each new Windows 1X "release" will bring brand new blocklist. Or they even managed to do it auto updating didn't checked that, at least previous Windows 10 versions doesn't seems update it since install.</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">Lets take Process Hacker discussed above, but latest version, and try to load it as admin with HVCI enforced:</span></div><div><span style="font-family: verdana;"><br /></span></div><div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEj462Z1qglJrqQIJlhFgi3XnSasFM068REm1tzqVQ5OD3X05Ze8bI-d9tG1zcZMT1aLu7RBiZar2pDFxsIP-x-fPIYXq_YBTAMO9Kigf93Cs19qUDXaAiR1M_p40XfltSuwXEYC-KLQjp2TIgFXWl5BnPL2Bn4DHEV94yXOytbAew-_e178tAwxWmjO=s497" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="448" data-original-width="497" src="https://blogger.googleusercontent.com/img/a/AVvXsEj462Z1qglJrqQIJlhFgi3XnSasFM068REm1tzqVQ5OD3X05Ze8bI-d9tG1zcZMT1aLu7RBiZar2pDFxsIP-x-fPIYXq_YBTAMO9Kigf93Cs19qUDXaAiR1M_p40XfltSuwXEYC-KLQjp2TIgFXWl5BnPL2Bn4DHEV94yXOytbAew-_e178tAwxWmjO=s16000" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Pic 4. HVCI enforced block of kprocesshacker.sys</td></tr></tbody></table><br /><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">With event 5038 added to the system security event log:&nbsp;</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;"><i>Code integrity determined that the image hash of a file is not valid.&nbsp; The file could be corrupt due to unauthorized modification or the invalid hash could indicate a potential disk device error.</i></span></div><div><span style="font-family: verdana;"><i><br /></i></span></div><div><span style="font-family: verdana;"><i>File Name:<span style="white-space: pre;">	</span>\Device\HarddiskVolume3\ProcessHacker\kprocesshacker.sys</i></span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">and NTSTATUS codes like STATUS_IMAGE_CERT_REVOKED and STATUS_DRIVER_UNABLE_TO_LOAD. This is actual Process Hacker v3.0 with valid digital signature and KProcessHacker3 which is immune to previous abuse by malware and cheaters.&nbsp;</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">Why is this happening or welcome to wonderful world of Microsoft incoherency.</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">Microsoft added Process Hacker (PH) to HVCI blocklist just recently. There are no live examples of Process Hacker v3 abuse by malware except one from Crowdstrike dated back to 2019 and updated in the Dec 2021,&nbsp;<a href="https://www.crowdstrike.com/blog/how-doppelpaymer-hunts-and-kills-windows-processes/">https://www.crowdstrike.com/blog/how-doppelpaymer-hunts-and-kills-windows-processes/</a>.&nbsp;This post gives you a brief to supposedly PH&nbsp;</span><span style="font-family: verdana;">driver malicious usage involving full bypass of it integrated client verification introduced in 2.39 and still used in 3.0+. From that post you will learn that over-engineered approach which is used almost everywhere in PH code doesn't guarantee security and wormhole features are still can be used by 3rd party if they really want to. From my point of view malware authors has nothing else to do by choosing Process Hacker driver as their "provider" because:</span></div><div><ol style="text-align: left;"><li><span style="font-family: verdana;">There are exist alternatives with much simpler (or none at all) verification logic, using them you can achieve the same "terminator" features;</span></li><li><span style="font-family: verdana;">Process Hacker already signatured by various&nbsp;<strike>Fake</strike>AV as PUP/Tool/HackTool (or TrojanMulDrop lol) because it different old versions are used by malware and they share scan patterns.</span></li></ol><div><span style="font-family: verdana;">Or they just wanted to piss-off PH authors showing them bypass of it over-engineered verification. Why then Microsoft doesn't considers its own Process Explorer (PE) driver as malicious security breaking tool? Lets leave aside "because it Microsoft signed lol" or "because it fits into security boundaries, have you saw secure device and <i><b>SePrivilegeCheck</b></i>?". If you compare how exactly PH and PE drivers does their "process" management you will notice that PH actually does it on lower level than PE. There are other functionally which is also should not exist at all - like duplicating handles, write/reading arbitrary processes memory, changing thread contexts etc. But lets start with simple thing, how PH and PE both acquire process handles.&nbsp;</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">PH uses&nbsp;<i><b>PsLookupProcessThreadByCid</b></i>/<i><b>PsLookupProcessByProcessId </b></i>and <i><b>ObOpenObjectByPointer</b></i>. This allows it to skip ordinary access checks, ETW logging and... bypass some of the security products relying on filtering. It is basically reimplemented ntoskrnl </span><i style="font-family: verdana;"><b>ZwOpenProces</b>-&gt;<b>PsOpenProcess</b></i><span style="font-family: verdana;"><b> </b>function with all the Se validation replaced with PH client/call verification. In comparison PE simple calls </span><i style="font-family: verdana;"><b>ZwOpenProcess </b></i><span style="font-family: verdana;">with </span><i style="font-family: verdana;">GENERIC_ALL</i><span style="font-family: verdana;"> desired access value. Both approaches are terrible piece of shit and comes from Windows XP era. If you need a handle to process/thread etc - use usermode call, that's&nbsp;is the only solid way to guarantee security and audit. If you still insist on accessing protected processes then entire operation should only take place in kernel <i>after</i> Windows security verification without returning anything important to usermode. Any termination/memory read/write from driver should be banned at all. This will however turn off "hacking" features of products as they won't be able to open/read/write everything. Sorry guys but this is how Windows now designed - if you not a part of trusted system code you can't access what ever you want. And there we have a dilemma - two drivers with wormhole functionality ideal for BYOVD attacks. One maintained open-source project, second proprietary Microsoft code without updates for decades. Both used by malware including APT. One in HVCI blocklist, second nope. I call this bullshit, Microsoft. What about PH, guys you are fucking process manager with extended features, not a Windows subsystem to replace or reinvent the MS security wheel just because you have nothing else to do and want to practice with system programming. Your "multi-purposing" is actually playing against you and serves no other purpose. You already removed a lot of "hacking" code from Process "Hacker" and still have a lot to remove/rework. Leave all this "hacking" to where it started - in the Windows XP era.</span></div></div><div><br /></div><div><span style="font-family: verdana;">Another piece in this blocklist that attracted my attention is a number of strange drivers MS added seems by lurking on unknowncheats.me forum, including leaked certificates. Well it is good to know you lurk on most currently famous forum dedicated to kernel mode rootkits (what an irony yeah).</span></div><div><span style="font-family: verdana;"><br /></span></div><div><span style="font-family: verdana;">VBoxDrv innotek entry brings good old memories of Turla and later DSEFix/TDL. The only question here is why innotek only. Unlike popular opinion the exploit used by Turla group wasn't previously disclosed and therefore fixed in next versions, so basically it was a zeroday. This entire confuse makes you think that VirtualBox has only innotek signed Turla-style exploitable drivers. Meanwhile I would remember you that Sun acquired innotek GmbH in 2008 and later VirtualBox versions came out signed by Sun certificate. Since this vulnerability in vboxdrv wasn't fixed - all vboxdrv drivers at least up to 3.0 version are equally&nbsp;vulnerable and can be easily adopted to be used like in DSEFix or TDL ?? (which was already done by some Chinese APT few years ago). Strange that this is not noticed by Microsoft.</span></div><div><span style="font-family: verdana;"><br /></span></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEgTLx1zKNwrYeY_IQxkUyhOq7flPkv63E7clk4LOSxIllB87TWVxAZMjhfwxlP8lUW-Re8qlse2mgj4ojo_c_029LNH_hN7u7_OBh03yVFrFF9kWRUwj4LlXePtv34KIDGmsPlvUv3Xru4VhSMXSb4i3abILmgEgoUoi7W8pNkQ-kY1KFutSYVNyKlc=s899" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="109" data-original-width="899" src="https://blogger.googleusercontent.com/img/a/AVvXsEgTLx1zKNwrYeY_IQxkUyhOq7flPkv63E7clk4LOSxIllB87TWVxAZMjhfwxlP8lUW-Re8qlse2mgj4ojo_c_029LNH_hN7u7_OBh03yVFrFF9kWRUwj4LlXePtv34KIDGmsPlvUv3Xru4VhSMXSb4i3abILmgEgoUoi7W8pNkQ-kY1KFutSYVNyKlc=s16000" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Pic 5. The old the new thing</td></tr></tbody></table><br /><div><span style="font-family: verdana;">Ideally this blocklist should be twice or triple size bigger with only what is available on public today.&nbsp;</span><span style="font-family: verdana;">No iobit, zemana fakeav drivers, no mihoyo, other anticheat crapware, no nVidia trash, no endless MSI packs of crap. Are you kidding, Microsoft? This is all available and exploitable. Right here, right now. Stop being a slowpoke, I've cookie for you.</span></div><p></p>